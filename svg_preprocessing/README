## How to run the preprocessing

All SVG fills need to be cleaned up based on their source.

Many SVG may have groups, transform and other things.

With [SVGO](https://svgo.dev/docs/), we can simplify a lot the language with mostly low precision path sequences.

Here is an example of command :
```
svgo --config=svgo.config.mjs -i output.svg   -p 1 --pretty --indent 2 --multipass --datauri unenc -o output_2.svg
```

A whole folder can be cleaned up with a recursive cmd :
```
for f in /media/amor/data/svg_data/svg/*.svg; do
  echo $f
  svgo --config=/home/amor/Downloads/svg_data/svgo.config.mjs -i $f -o $f.new
  sed 's/data:image\/svg+xml,data:image\/svg+xml,//' $f.new > $f.final
  rm $f.new
done
```

It avoids some OOM errors

Some files were filed with file type character, they can be cleaned with

```
for f in *; do
  echo $f
  sed 's/data:image\/svg+xml,data:image\/svg+xml,//' $f > $f.new.new
done
```


## Do it with inkscape

for f in /media/amor/data/svg_data/svg/*.svg; do
    echo $f
    export r=$(echo $f | sed -r "s/.+\/(.+)\..+/\1/")
    inkscape --actions="select-all;object-to-path;export-type:svg;export-filename:./$r.svg;export-do;" $f
    inkscape ./$r.svg --export-plain-svg --export-type=svg --export-filename=$r_out
    python3 /usr/share/inkscape/extensions/ungroup_deep.py ./`echo $r`_out.svg > ./`echo $r`_test.svg
    python3 /usr/share/inkscape/extensions/applytransform.py ./`echo $r`_test.svg > ./`echo $r`_finish.svg
    rm  ./`echo $r`_out.svg  ./`echo $r`_test.svg ./`echo $r`.svg
done


