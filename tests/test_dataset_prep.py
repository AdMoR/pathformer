from unittest import TestCase
import numpy as np
import ndjson
import os

from pathformer.datasets.path_dataset import (build_dataset, build_stroke_transition, LineCommand,
                                              find_file_i_for_sample_index, DrawingDataset)

class TestDatasetBuilder(TestCase):

    @classmethod
    def setUpClass(cls):
        cls.path = "./test.ndjson"
        cls.data = [{"word":"axe","countrycode":"KR","timestamp":"2017-03-22 06:30:48.17146 UTC","recognized": True,"key_id":"5344373355053056",
                     "drawing":[[[69,83,92,102,113,123,132,141,150,158,166,173,179,184,191,195,195],  [105,111,114,118,121,123,124,123,121,119,116,113,111,109,105,100,100],[0,73,89,107,130,144,158,173,192,206,232,246,259,273,307,372,384]],
                                [[67,72,75,77,79,79,79,79,77,75,73,70,79,85,91,99,106,113,120,127,135,142,149,156,163,170,176,181,186,191,196,198],[114,134,142,151,160,169,178,186,193,199,204,210,208,205,202,197,193,190,188,186,184,184,183,183,183,183,183,183,183,184,184,183],[676,805,832,844,856,872,891,907,930,942,956,990,1254,1263,1275,1290,1308,1331,1344,1358,1373,1390,1407,1430,1440,1458,1474,1490,1508,1524,1561,1619]],
                                [[190,190,190,189,189,189,189,189,189,190,190,190,191,192,193,194,194,195,196,197,198,199,199,199,199,199,199,199,199],[96,112,122,131,140,148,157,166,173,180,190,198,207,215,222,230,240,250,259,268,277,286,294,302,310,317,322,327,328],[1848,1948,1962,1978,1991,2008,2024,2045,2056,2073,2090,2107,2123,2147,2159,2175,2190,2207,2224,2246,2258,2273,2289,2308,2326,2348,2363,2391,2434]],
                                [[187,203,208,209,209,209,209,208,208,207,207,207,208,209,210,212,214,215,217,218,219,220,221,222,223,224,225,226,227,227,228,229,229,229,224,219,213,208,208],[103,100,101,109,116,123,131,139,146,153,161,168,176,183,190,197,204,214,224,235,243,250,257,263,270,276,282,288,294,300,305,313,319,324,328,329,330,330,330],[2841,3023,3134,3182,3194,3202,3211,3225,3248,3261,3282,3295,3307,3323,3339,3357,3379,3393,3407,3424,3449,3464,3477,3490,3507,3523,3541,3557,3573,3590,3607,3643,3675,3723,3856,3890,3924,3955,3968]]]},
                    {"word":"axe","countrycode":"SE","timestamp":"2017-01-27 21:49:54.40682 UTC","recognized":True,"key_id":"6545061917491200","drawing":[[[712.9450073242188,707.9869995117188,704.02099609375,700.0540161132812,695.0960083007812,691.1300048828125,686.1719970703125,683.197021484375,679.2310180664062,675.2650146484375,670.3070068359375,666.3410034179688,661.3829956054688,657.416015625,653.4500122070312,649.4840087890625,645.5180053710938,642.5430297851562,638.5759887695312,636.593017578125,636.593017578125,637.5850219726562,639.5679931640625,641.551025390625,642.5430297851562,642.5430297851562,642.5430297851562,643.5339965820312,644.5260009765625,644.5260009765625,645.5180053710938,646.5089721679688,646.5089721679688,646.5089721679688,646.5089721679688,645.5180053710938,644.5260009765625,642.5430297851562,641.551025390625,639.5679931640625,638.5759887695312,636.593017578125,634.6099853515625,633.6190185546875,632.6270141601562,630.6439819335938,628.6610107421875,633.6190185546875,638.5759887695312,645.5180053710938,650.4749755859375,655.4329833984375,661.3829956054688,666.3410034179688,671.2990112304688,676.2559814453125,681.2139892578125,687.1640014648438,693.1129760742188,699.06298828125,704.02099609375,708.97900390625,713.9359741210938,714.927978515625,714.927978515625,714.927978515625,714.927978515625,713.9359741210938,713.9359741210938,712.9450073242188,712.9450073242188,712.9450073242188,711.9530029296875,711.9530029296875,710.9619750976562,710.9619750976562,709.969970703125,709.969970703125,708.97900390625,707.9869995117188,706.9949951171875,705.0120239257812,703.0289916992188,702.0369873046875,700.0540161132812,698.0709838867188,697.0800170898438,697.0800170898438,696.0880126953125,693.1129760742188,693.1129760742188,692.1220092773438,691.1300048828125,691.1300048828125,690.1389770507812,690.1389770507812,689.14697265625,688.155029296875,688.155029296875,688.155029296875,688.155029296875,688.155029296875,688.155029296875],[180.91099548339844,178.92799377441406,173.97000122070312,169.01199340820312,165.04600524902344,160.08799743652344,155.1300048828125,149.18099975585938,143.2310028076172,138.2740020751953,133.3159942626953,127.36599731445312,122.40800476074219,116.45899963378906,111.50100708007812,105.55099487304688,99.60200500488281,94.64399719238281,89.68600463867188,95.63600158691406,100.593994140625,105.55099487304688,110.50900268554688,115.46699523925781,121.41700744628906,126.375,131.33299255371094,136.2899932861328,141.2480010986328,147.197998046875,153.14700317382812,159.0970001220703,165.04600524902344,170.99600219726562,176.94500732421875,181.9029998779297,187.85198974609375,193.802001953125,199.75100708007812,204.70901489257812,209.6669921875,216.60800170898438,221.56600952148438,227.5159912109375,232.4739990234375,237.43099975585938,242.38900756835938,244.37200927734375,242.38900756835938,238.42300415039062,234.45700073242188,230.489990234375,226.52398681640625,223.54901123046875,220.57501220703125,218.59100341796875,216.60800170898438,215.61700439453125,213.63400268554688,212.64199829101562,210.65899658203125,208.67599487304688,210.65899658203125,215.61700439453125,221.56600952148438,228.50698852539062,233.46499633789062,239.41500854492188,245.364013671875,253.2969970703125,259.2460021972656,267.1789855957031,276.1029968261719,284.0360107421875,292.9599914550781,297.9179992675781,303.86700439453125,308.82501220703125,313.7829895019531,322.7070007324219,327.6650085449219,335.5979919433594,342.53900146484375,350.47100830078125,358.40399169921875,366.3370056152344,373.27801513671875,378.2359924316406,386.1679992675781,398.0669860839844,406.9909973144531,411.9490051269531,416.9070129394531,425.83099365234375,431.781005859375,437.7300109863281,442.68798828125,451.61199951171875,456.57000732421875,461.52801513671875,467.47802734375,472.43499755859375,474.41900634765625],[0,303,413,485,542,600,641,674,698,723,766,798,822,846,871,896,920,945,978,1183,1208,1241,1284,1323,1356,1397,1430,1466,1488,1512,1536,1566,1586,1612,1635,1665,1684,1713,1734,1759,1775,1800,1819,1834,1849,1874,1915,2272,2294,2317,2334,2351,2375,2402,2440,2473,2506,2531,2555,2581,2605,2637,2885,2910,2925,2944,2964,2977,2991,3007,3024,3040,3057,3074,3089,3098,3106,3115,3123,3139,3149,3167,3180,3196,3214,3235,3251,3256,3279,3304,3318,3323,3329,3345,3353,3362,3369,3386,3395,3402,3418,3443,3496]],[[720.8770141601562,721.8690185546875,722.8610229492188,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,723.8519897460938,724.843994140625,729.802001953125,738.7260131835938,743.6840209960938,751.6160278320312,759.5490112304688,766.489990234375,772.4400024414062,777.39697265625,779.3809814453125,779.3809814453125,779.3809814453125,779.3809814453125,778.3889770507812,778.3889770507812],[180.91099548339844,175.95399475097656,170.00399780273438,165.04600524902344,160.08799743652344,155.1300048828125,150.17300415039062,143.2310028076172,138.2740020751953,133.3159942626953,127.36599731445312,121.41700744628906,115.46699523925781,109.51800537109375,104.55999755859375,99.60200500488281,95.63600158691406,91.66900634765625,88.69500732421875,85.72000122070312,82.7449951171875,79.77000427246094,78.77900695800781,79.77000427246094,88.69500732421875,95.63600158691406,101.58500671386719,110.50900268554688,120.42500305175781,129.3489990234375],[3927,4073,4106,4139,4165,4196,4238,4283,4303,4329,4344,4362,4377,4402,4428,4517,4543,4560,4566,4583,4599,4615,4640,4706,4731,4739,4748,4755,4763,4771]]]}]
        ndjson.dump(cls.data, open(cls.path, "w"))

    @classmethod
    def tearDownClass(cls):
        os.remove(cls.path)

    def test_e2e(self):
        rez = build_dataset(self.path)
        self.assertEqual(len(rez), 2)
        
    def test_build_stroke_transition(self):
        data = [[np.array([1.0, 1.0]), np.array([2.0, 2.0])]]
        rez = build_stroke_transition(data).strokes

        assert len(rez) == 3
        assert rez[0].command_name == LineCommand.M
        assert rez[1].command_name == LineCommand.L
        assert rez[2].command_name == LineCommand.Z
        self.assertAlmostEqual(np.linalg.norm(rez[1].coords - np.array([1, 1])), 0)

    def test_cumsum_array_build(self):
        doc_len = [12, 34, 120]
        cumsum_array = np.cumsum(doc_len)
        self.assertListEqual(cumsum_array.tolist(), [12, 46, 166])

    def test_index_from_cumsum(self):
        cumsum_array = [12, 46, 166]
        for dataset_index, data_file_index, reminder in zip([0, 12, 11, 47], [0, 1, 0, 2], [0, 0, 11, 1]):
            rez = find_file_i_for_sample_index(cumsum_array, dataset_index)
            self.assertEqual(rez[0], data_file_index, f"results {(dataset_index, data_file_index, reminder)}")
            self.assertEqual(rez[1], reminder, f"results {(dataset_index, data_file_index, reminder)}")


class TestDataset(TestCase):

    def teste2e(self):
        dd = DrawingDataset("/home/amor/Documents/code_dw/pathformer/dataset/")
        print(dd[[0, 1]]["coords"].shape)